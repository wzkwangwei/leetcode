//Longest Palindromic Substring(最长的回文序列)
#include <string>
class Solution {
public:
    //int getCenter(string s, int left, int right){
    //    int result;
    //    int count = s.size();
    //    while (left >= 0 && right < count && s[left] == s[right])
    //    {
    //        left--;
    //        right++;
    //    }
    //    result = right - left - 1;
    //    return result;
    //}
    //string longestPalindrome(string s) {
    //    int i, len1, len2, len, start, end;
    //    string result;
    //    int count = s.size();
    //    start = 0; 
    //    end = 0;
    //    for(i = 0; i < count; i++)
    //    {
    //        len1 = getCenter(s,i,i);
    //        len2 = getCenter(s,i,i+1);
    //        if(len2 > len1)
    //        {
    //            len = len2;
    //        }
    //        else 
    //        {
    //            len = len1;
    //        }
    //        if(len > end - start)
    //        {
    //            end = i + len/2;
    //            start = i - (len - 1)/2;
    //        }
    //    }
    //    //for(i = start; i <= end; i++)
    //    //{
    //    //    result += s[i];
    //    //}
    //    //result = s.substr(start,len);
    //    result = s.substr(start, end - start +1);
    //    return result;
    //}
    string longestPalindrome(string s) {
        bool staus[1000][1000] = {false};
        string result;
        int i, j, len, start, end, lenr;
        int count = s.size();
        start = 0;
        lenr = 1;
        for(i = 0; i < count; i++)
        {
            staus[i][i] = true;
        }
        for(i = 0; i < count - 1; i++)
        {
            if(s[i] == s[i+1])
            {
                staus[i][i+1] = true;
                start = i;
                lenr = 2;
            }
        }
        for(len = 2; len <= count; len++)
        {
            for(i = 0; i <= count - len ; i++)
            {
                j = i + len - 1;
                if(s[i] == s[j] && staus[i+1][j-1])
                {
                    staus[i][j] = true;
                    start = i;
                    lenr = len;
                }
            }
        }
        result = s.substr(start,lenr);
        return result;
    }
};
//采用函数递归的算法
//class Solution {
//public:
//    bool isMatch(string s, string p) {
//        if(p.empty())
//        {
//            return s.empty();     
//        }
//        else
//        {
//            bool first_match;
//            first_match = ((!s.empty()) && (p.at(0) == s.at(0) || p.at(0) == '.'));
//            
//            if(p.length() >= 2 && p.at(1) == '*')
//            {
//                string p1 = p;
//                return ((isMatch(s,p.erase(0,2))) || (first_match && (isMatch(s.erase(0,1),p1))));
//            }
//            else
//            {
//                return (first_match && isMatch(s.erase(0,1),p.erase(0,1)));
//            }
//        }
//    }
//};

//采用动态归划的算法(Bottom-Up)(从dp[0][0]一直算到dp[m][n],dp[m][n]就是最后所需的结果)
class Solution {
public:
    bool isMatch(string s, string p) {
        int m = s.size(), n = p.size();
        vector<vector<bool>> dp(m + 1, vector<bool>(n + 1, false));
        dp[0][0] = true;
        for (int i = 0; i <= m; ++i) {
            for (int j = 1; j <= n; ++j) {
                if (j > 1 && p[j - 1] == '*') {
                    dp[i][j] = dp[i][j - 2] || (i > 0 && (s[i - 1] == p[j - 2] || p[j - 2] == '.') && dp[i - 1][j]);
                } else {
                    dp[i][j] = i > 0 && dp[i - 1][j - 1] && (s[i - 1] == p[j - 1] || p[j - 1] == '.');
                }
            }
        }
        return dp[m][n];
    }
};
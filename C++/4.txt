class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        double result;
        int count1, count2, count, i, j, count_half, max_left, max_right;
        count1 = nums1.size();
        count2 = nums2.size();
        count = count1 + count2;
        count_half = (count + 1)/2;
        if(count1 > count2)
        {
            vector<int> temp;
            temp = nums1;
            nums1 = nums2;
            nums2 = temp;
        }
        int iMin, iMax;
        count1 = nums1.size();
        count2 = nums2.size();
        iMin = 0;
        iMax = count1;
        while(iMin <= iMax)
        {
            i = (iMin + iMax)/2;
            j = count_half - i;
            if(i < iMax && nums1.at(i) < nums2.at(j - 1))
            {
                iMin = i + 1;
            }
            else if(i > 0 && nums1.at(i - 1) > nums2.at(j))
            {
                iMax = i - 1;
            }
            else 
            {
                if(i == 0)
                {
                    max_left = nums2.at(j - 1);
                }
                else if(j == 0)
                {
                    max_left = nums1.at(i - 1);
                }
                else
                {
                    if(nums1.at(i - 1) >= nums2.at(j - 1))
                    {
                        max_left = nums1.at(i - 1);
                    }
                    else
                    {
                        max_left = nums2.at(j - 1);
                    }
                }
                if(count % 2 == 1)
                {
                    return max_left;
                }
                
                if(i == count1)
                {
                    max_right = nums2.at(j);
                }
                else if(j == count2)
                {
                    max_right = nums1.at(i);
                }
                else
                {
                    if(nums2.at(j) <= nums1.at(i))
                    {
                        max_right = nums2.at(j);
                    }
                    else 
                    {
                       max_right = nums1.at(i); 
                    }
                }
                result = (max_left + max_right);
                result = result/2;
                return result;
            }
        }
        //int count1, count2, count, l1, l2, count_half;
        //count1 = nums1.size();
        //count2 = nums2.size();
        //count = count1 + count2;
        //l1 = 0;
        //l2 = 0;
        //count_half = count/2;
        //vector<int> new_array;
        //while(l1 + l2 <= count_half)
        //{
        //    if(l1 < count1 && l2 < count2)
        //    {
        //        if(nums1.at(l1) <= nums2.at(l2))
        //        {
        //            new_array.push_back(nums1.at(l1));
        //            l1++;
        //        }
        //        else
        //        {
        //            new_array.push_back(nums2.at(l2));
        //            l2++;
        //        }
        //    }
        //    else if(l1 == count1 )
        //    {
        //        new_array.push_back(nums2.at(l2));
        //        l2++;
        //    }
        //    else if(count2 == l2)
        //    {
        //        new_array.push_back(nums1.at(l1));
        //        l1++;
        //    }
        //}
        //if(count % 2 == 1)
        //{
        //    result = new_array.at(count/2);
        //}
        //else
        //{
        //    result = (new_array.at(count/2) + new_array.at((count/2) - 1));
        //    result = result/2;
        //}
        return result;
    }
};
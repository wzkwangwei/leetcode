//Letter Combinations of a Phone Number
class Solution {
public:
    vector<string> letterCombinations(string digits) {
        vector<string> result;
        if(digits.empty())
        {
            return result;
        }
        int length = digits.length();
        string tempResult(length,0);
        dfs(tempResult, 0, length, result,digits); //采用深度优先搜索的方法
        return result;
    }
    
    void dfs(string& temp, int curdep, int depth, vector<string>& ans, string digits)
    {
        if(curdep >= depth)
        {
            ans.push_back(temp);
            return;
        }
        else
        {
            for(int i = 0; i < dic[digits[curdep] - '0'].length(); i++)
            {
                temp[curdep] = dic[digits[curdep] - '0'][i];
                dfs(temp, curdep + 1, depth, ans, digits);
            }
        }
    }
    
private:
    string dic[10] = {{""},{""},{"abc"},{"def"},{"ghi"},{"jkl"},{"mno"},{"pqrs"},{"tuv"},{"wxyz"}};
};